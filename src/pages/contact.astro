---
import BaseLayout from "src/layouts/BaseLayout.astro";
import client from "@data/client.json";
import Landing from "@components/Landing.astro";
---

<BaseLayout title="Contact" description="Meta description for the page">
  <Landing title="Contact" />

  <section id="csf-contact" class="cs-contact">
    <div class="cs-container">
      <form id="cs-form" class="cs-form" name="Contact Form" method="post">
        <div class="cs-content">
          <a href="#" id="back-button" class="back-link cs-text">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="16"
              height="16"
              viewBox="0 0 16 16"
              class="arrowsvg"
            >
              <path
                d="M7.53 1.97a.75.75 0 0 0-1.06 0L1.47 6.866a1.25 1.25 0 0 0 0 1.768L6.47 13.53a.75.75 0 0 0 1.06-1.06l-3.97-3.97h10.69a.75.75 0 0 0 0-1.5H3.56l3.97-3.97a.75.75 0 0 0 0-1.06"
              ></path>
            </svg>
            Close this form
          </a>
          <p class="cs-text">Please provide your information.</p>
        </div>
        <label>
          Name *
          <input
            required
            type="text"
            id="name"
            name="name"
            placeholder="Jane Smith"
          />
        </label>
        <label>
          Email *
          <input
            required
            type="text"
            id="email"
            name="email"
            placeholder="name@example.com"
          />
        </label>
        <label>
          Phone *
          <input
            required
            type="text"
            id="phone"
            name="phone"
            placeholder="555-555-5555"
          />
        </label>
        <label>
          Company
          <input
            type="text"
            id="find"
            name="find-us"
            placeholder="The Corporation"
          />
        </label>
        <label class="cs-label-message">
          Tell us about your project. *
          <textarea
            required
            name="Message"
            id="message"
            placeholder="Write message..."></textarea>
        </label>
        <button class="cs-button cs-button-solid" type="submit">OK</button>
      </form>
      <script client:load>
        document
          .getElementById("back-button")
          .addEventListener("click", function (event) {
            event.preventDefault(); // Prevents any default link behavior
            window.history.back();
          });
      </script>

      <!-- <div class="cs-right-section">
        
        <span class="cs-header">Email</span>
        <a class="cs-link" href={`mailto:${client.email}`}>{client.email}</a>
        
        <span class="cs-header">Phone</span>
        <a class="cs-link" href={`tel:${client.phoneForTel}`}
          >{client.phoneFormatted}</a
        >
       
        <span class="cs-header">Address</span>
        <a class="cs-link" href={client.address.mapLink}>
          {client.address.lineOne},
          <br />
          {client.address.lineTwo},
          <br />
          <span class="cs-block">
            {client.address.city}
            {client.address.state}
            {client.address.zip}
          </span>
        </a> -->

      <!-- Background Image-->
      <!-- <picture class="cs-bg-picture">
          <source
            media="(min-width: 601px)"
            srcset="/assets/images/skyscraper.jpg"
          />
          <img
            aria-hidden="true"
            decoding="async"
            src="/assets/images/skyscraper.jpg"
            alt="building"
            loading="lazy"
            width="2500"
            height="1667"
          />
        </picture> -->
    </div>
  </section>
</BaseLayout>

<style lang="scss">
  .int-hero {
    display: none;
  }
  body {
    // background: #191011;
  }
  .arrowsvg {
    display: inline-block;
    vertical-align: top;
    fill: var(--bodyTextColor);
    transition: fill 0.2s;
    padding-top: 5px;
  }
  /* Mobile - 360px */
  @media only screen and (min-width: 0em) {
    :root {
      /* 13px - 16px */
      --topperFontSize: clamp(0.8125rem, 1.6vw, 1rem);
      /* 31px - 49px */
      --headerFontSize: clamp(1.9375rem, 4.5vw, 3.0625rem);
      --bodyFontSize: 1rem;

      /* 60px - 100px top and bottom */
      --sectionPadding: clamp(3.75em, 7.82vw, 6.25em) 1rem;
    }

    .cs-contact {
      font-family: "Roboto", "Arial", sans-serif;
      padding: var(--sectionPadding);

      .cs-container {
        width: 100%;
        /* changes to 1280px at desktop */
        max-width: calc(800 / 16 * 1rem);
        margin: 3rem auto;
      }

      .cs-content {
        width: 100%;
      }

      .cs-topper {
        text-align: left;
        /* 8px - 12px */
        margin-bottom: clamp(0.5rem, 1.4vw, 0.75rem);
      }

      .cs-title {
        text-align: left;
        max-width: calc(800 / 16 * 1rem);
      }

      .cs-text {
        text-align: left;
        /* 404px - 522px */
        max-width: clamp(25.25rem, 30vw, 32.625rem);
        margin: 0 auto 0 0;
        /* 40px - 48px */
        margin-bottom: clamp(2.5rem, 6.3vw, 3rem);
        display: block;
      }

      a.cs-text {
        cursor: pointer;
      }

      .cs-form {
        margin-bottom: calc(40 / 16 * 1rem);

        label {
          font-size: calc(16 / 16 * 1rem);
          font-weight: 700;
          line-height: 1.5em;
          /* 12px - 20px */
          margin-bottom: clamp(0.75rem, 1.3em, 1.25rem);
          color: var(--bodyTextColor);
          display: flex;
          flex-direction: column;
          justify-content: center;
          align-items: flex-start;
        }

        .cs-label-message {
          /* 32px - 48px */
          margin-bottom: clamp(2rem, 6.3vw, 3rem);
        }

        input,
        textarea {
          font-size: calc(20 / 16 * 1rem);
          width: 100%;
          height: calc(48 / 16 * 1rem);
          margin-top: calc(4 / 16 * 1rem);
          box-sizing: border-box;
          border: none;
          border-bottom: 1px solid #b4b2c7;
          transition: border 0.3s;
          background-color: transparent;
          color: var(--bodyTextColor);
          outline: none;

          &:hover {
            border-bottom: 3px solid var(--primary);
          }
        }

        textarea {
          font-family: inherit;
          min-height: calc(120 / 16 * 1rem);
          padding-top: calc(20 / 16 * 1rem);
        }

        .cs-button-solid {
          width: 100px;
          border: none;
          background-color: var(--bodyTextColorWhite);
          border-radius: 8px;
          padding: 0.5rem 1rem;
          border-radius: 16px;
          position: relative;
          height: auto;
          line-height: 1rem;
        }
      }

      .cs-right-section {
        height: calc(320 / 16 * 1rem);
        /* 24px - 40px top & bottom */
        /* 20px - 40px left & right */
        padding: clamp(1.5rem, 3vw, 2.5rem) clamp(1.25rem, 3vw, 2.5rem);
        border-radius: calc(8 / 16 * 1rem);
        display: flex;
        flex-direction: column;
        justify-content: flex-end;
        align-items: flex-start;
        position: relative;
        overflow: hidden;
      }

      .cs-header {
        /* 16px - 20px */
        font-size: clamp(1rem, 3vw, 1.25rem);
        font-weight: 700;
        line-height: 1.2em;
        margin-bottom: calc(8 / 16 * 1rem);
        color: var(--bodyTextColorWhite);
        display: block;
      }

      .cs-link {
        /* 16px - 20px */
        font-size: clamp(1rem, 3vw, 1.25rem);
        line-height: 1.2em;
        text-decoration: none;
        margin-bottom: calc(20 / 16 * 1rem);
        color: var(--bodyTextColorWhite);
        display: block;
        position: relative;

        &:before {
          /* Animated underline */
          content: "";
          width: 0%;
          height: 2px;
          background: var(--primary);
          opacity: 1;
          display: block;
          position: absolute;
          bottom: calc(-2 / 16 * 1rem);
          left: 0;
          transition: width 0.3s;
        }

        &:hover {
          &:before {
            width: 100%;
          }
        }

        &:last-of-type {
          margin-bottom: 0;
        }
      }

      .cs-block {
        display: block;
      }
    }
  }

  /* Tablet - 700px */
  @media only screen and (min-width: 43.75em) {
    .cs-contact {
      .cs-form {
        display: flex;
        justify-content: center;
        align-items: flex-start;
        flex-wrap: wrap;

        label {
          width: 100%;
        }

        .cs-label-message {
          width: 100%;
        }
      }
    }

    :root {
      --bodyFontSize {
        font-size: 1.25rem;
      }
    }
  }

  /* Small Desktop - 1024px */
  @media only screen and (min-width: 64em) {
    .cs-contact {
      .cs-container {
        max-width: 80rem; // (1280 / 16)
        display: flex;
        justify-content: center;
        align-items: flex-start;
        gap: 5rem; // (80 / 16)
      }

      .cs-form {
        max-width: 39.375rem; // (630 / 16)

        label {
          width: 100%;
        }
      }

      .cs-right-section {
        width: 40%;
        max-width: 33.875rem; // (542 / 16)
        height: 42.875rem; // (686 / 16)
        flex: none;

        &:hover {
          .cs-bg-picture {
            transform: scale(1.1);
          }
        }
      }

      .cs-block {
        display: inline-block;
      }
    }
  }

  /* Small Desktop - 1300px */
  @media only screen and (min-width: 81.25em) {
    .cs-contact {
      .cs-form {
        column-gap: 0rem; // (0 / 16)

        label {
          //  width: 48%;
          //  max-width: 19.0625rem;  // (305 / 16)
        }

        .cs-label-message {
          max-width: 100%;
        }
      }

      .cs-right-section {
        height: 36.125rem; // (578 / 16)
      }
    }
  }

  /* Dark Mode */
  @media only screen and (min-width: 0em) {
    body.dark-mode {
      .cs-contact {
        .cs-text,
        .cs-title {
          color: var(--bodyTextColorWhite);
        }

        .cs-topper {
          color: var(--primaryLight);
        }

        .cs-form {
          label,
          input,
          textarea {
            color: var(--bodyTextColorWhite);
            background-color: transparent;

            &::placeholder {
              /* lighten up the color of the text by 40%*/
              filter: brightness(1.4);
            }
          }
        }

        .cs-bg-picture {
          background-color: #000;

          img {
            /* lets parent background-color bleed through and darken it */
            opacity: 0.5;
          }
        }

        .arrowsvg {
          fill: #fff;
        }
      }
    }
  }
</style>
